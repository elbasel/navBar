var n={340:(n,e,t)=>{t.d(e,{Z:()=>s});var o=t(537),a=t.n(o),r=t(645),i=t.n(r)()(a());i.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Montserrat:wght@900&display=swap);"]),i.push([n.id,"/* ========== START Dark Mode Colors ========== */\n:root {\n    --primary-color: #181a1b;\n    --secondary-color: #2b2f31;\n    --blue: #004daa;\n    --text-color: #d8d4cf;\n    --caption-color: #e8e6e3;\n    --main-font: 'Montserrat', sans-serif;\n}\n\n/* ========== END Dark Mode Colors ========== */\n/* To use background images thourgh  url, use it in Javasciprt using \nimport asset statment and e.style.background = `${importedImage}` */\n\nhtml {\n    /* height: -webkit-fill-available; */\n}\n\nbody {\n    /* width: 100vw; */\n    /* min-height: 100vh; */\n    /* min-height: -webkit-fill-available; */\n    /* background-color: var(--primary-color); */\n    /* display: flex; */\n    /* flex-direction: column; */\n}\n\n/* main {\n    flex: 10;\n} */\n\n.nav {\n    /* flex: 1; */\n    display: flex;\n    border-radius: 24px;\n    max-height: 100px;\n\n    min-height: 90px;\n    overflow: hidden;\n}\n\n.nav-item {\n    flex: 1;\n    background-color: var(--secondary-color);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 6px;\n\n    position: relative;\n}\n\n.nav-item img {\n    width: 60px;\n    height: 48px;\n    padding: 12px 18px;\n    border-radius: 24px;\n}\n\nimg.selected {\n    background-color: rgb(32, 32, 150);\n}\n\n.nav-item .animation {\n    position: absolute;\n    width: 100px;\n    height: 100px;\n    background-color: white;\n    /* z-index: ; */\n    border-radius: 50%;\n    bottom: 10px;\n    animation: ping 0.4s ease-in-out 1 none;\n\n    display: none;\n}\n\n.nav-item p {\n    font-size: 16px;\n    color: #666666;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n        Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    font-weight: 700;\n}\n\n@keyframes ping {\n    0% {\n        transform: scale(0.2);\n        opacity: 0.8;\n    }\n    80% {\n        transform: scale(1.2);\n        opacity: 0;\n    }\n    100% {\n        transform: scale(2.2);\n        opacity: 0;\n    }\n}\n","",{version:3,sources:["webpack://./src/css/index.css"],names:[],mappings:"AAEA,iDAAiD;AACjD;IACI,wBAAwB;IACxB,0BAA0B;IAC1B,eAAe;IACf,qBAAqB;IACrB,wBAAwB;IACxB,qCAAqC;AACzC;;AAEA,+CAA+C;AAC/C;mEACmE;;AAEnE;IACI,oCAAoC;AACxC;;AAEA;IACI,kBAAkB;IAClB,uBAAuB;IACvB,wCAAwC;IACxC,4CAA4C;IAC5C,mBAAmB;IACnB,4BAA4B;AAChC;;AAEA;;GAEG;;AAEH;IACI,aAAa;IACb,aAAa;IACb,mBAAmB;IACnB,iBAAiB;;IAEjB,gBAAgB;IAChB,gBAAgB;AACpB;;AAEA;IACI,OAAO;IACP,wCAAwC;IACxC,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,uBAAuB;IACvB,QAAQ;;IAER,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,mBAAmB;AACvB;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,uBAAuB;IACvB,eAAe;IACf,kBAAkB;IAClB,YAAY;IACZ,uCAAuC;;IAEvC,aAAa;AACjB;;AAEA;IACI,eAAe;IACf,cAAc;IACd;oEACgE;IAChE,gBAAgB;AACpB;;AAEA;IACI;QACI,qBAAqB;QACrB,YAAY;IAChB;IACA;QACI,qBAAqB;QACrB,UAAU;IACd;IACA;QACI,qBAAqB;QACrB,UAAU;IACd;AACJ",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@900&display=swap');\n\n/* ========== START Dark Mode Colors ========== */\n:root {\n    --primary-color: #181a1b;\n    --secondary-color: #2b2f31;\n    --blue: #004daa;\n    --text-color: #d8d4cf;\n    --caption-color: #e8e6e3;\n    --main-font: 'Montserrat', sans-serif;\n}\n\n/* ========== END Dark Mode Colors ========== */\n/* To use background images thourgh  url, use it in Javasciprt using \nimport asset statment and e.style.background = `${importedImage}` */\n\nhtml {\n    /* height: -webkit-fill-available; */\n}\n\n`\n    /* width: 100vw; */\n    /* min-height: 100vh; */\n  /* align-items: end; */\n  /* min-height: -webkit-fill-available; */\n    /* background-color: var(--primary-color); */\n    /* display: flex; */\n    /* flex-direction: column; */\n}\n\n/* main {\n    flex: 10;\n} */\n\n.nav {\n    /* flex: 1; */\n    display: flex;\n    border-radius: 24px;\n    max-height: 100px;\n\n    min-height: 90px;\n    overflow: hidden;\n}\n\n.nav-item {\n    flex: 1;\n    background-color: var(--secondary-color);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 6px;\n\n    position: relative;\n}\n\n.nav-item img {\n    width: 60px;\n    height: 48px;\n    padding: 12px 18px;\n    border-radius: 24px;\n}\n\nimg.selected {\n    background-color: rgb(32, 32, 150);\n}\n\n.nav-item .animation {\n    position: absolute;\n    width: 100px;\n    height: 100px;\n    background-color: white;\n    /* z-index: ; */\n    border-radius: 50%;\n    bottom: 10px;\n    animation: ping 0.4s ease-in-out 1 none;\n\n    display: none;\n}\n\n.nav-item p {\n    font-size: 16px;\n    color: #666666;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n        Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    font-weight: 700;\n}\n\n@keyframes ping {\n    0% {\n        transform: scale(0.2);\n        opacity: 0.8;\n    }\n    80% {\n        transform: scale(1.2);\n        opacity: 0;\n    }\n    100% {\n        transform: scale(2.2);\n        opacity: 0;\n    }\n}\n"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,a,r){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var A=0;A<n.length;A++){var l=[].concat(n[A]);o&&i[l[0]]||(void 0!==r&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=r),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(a," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([r]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var r={},i=[],s=0;s<n.length;s++){var c=n[s],A=o.base?c[0]+o.base:c[0],l=r[A]||0,d="".concat(A," ").concat(l);r[A]=l+1;var p=t(d),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var m=a(u,o);o.byIndex=s,e.splice(s,0,{identifier:d,updater:m,references:1})}i.push(d)}return i}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var r=o(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<r.length;i++){var s=t(r[i]);e[s].references--}for(var c=o(n,a),A=0;A<r.length;A++){var l=t(r[A]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}r=c}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,a&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var a=e[o];if(void 0!==a)return a.exports;var r=e[o]={id:o,exports:{}};return n[o](r,r.exports,t),r.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e);var o={};(()=>{t.d(o,{Z:()=>C});var n=t(379),e=t.n(n),a=t(795),r=t.n(a),i=t(569),s=t.n(i),c=t(565),A=t.n(c),l=t(216),d=t.n(l),p=t(589),u=t.n(p),m=t(340),f={};f.styleTagTransform=u(),f.setAttributes=A(),f.insert=s().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=d(),e()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;const C=(()=>{const n=[],e=[];return{getNavElement:function([{icon0:t,text0:o},{icon1:a,text1:r},{icon2:i,text2:s},{icon3:c,text3:A}]){const l=document.createElement("div");l.classList.add("nav");for(let n=0;n<4;n+=1){const n=document.createElement("div");n.classList.add("nav-item"),e.push(n)}return e.forEach(((e,l)=>{let d="",p="";0===l?(d=t,p=o):1===l?(d=a,p=r):2===l?(d=i,p=s):3===l&&(d=c,p=A);const u=document.createElement("img");0===l&&u.classList.add("selected"),u.src=d,e.appendChild(u),n.push(u);const m=document.createElement("p");m.textContent=p,e.appendChild(m);const f=document.createElement("div");f.classList.add("animation"),e.appendChild(f),e.addEventListener("click",(()=>{!function(e,t){n.forEach((n=>{n.classList.remove("selected")})),e.classList.add("selected"),t.style.display="block",setTimeout((()=>{t.style.display="none"}),390)}(u,f)}))})),e.forEach((n=>{l.appendChild(n)})),l}}})()})();var a=o.Z;export{a as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
